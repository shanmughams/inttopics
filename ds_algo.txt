
Binary trees:
============
Depth First Traversal: Inorder (Left-Root-Right), Preorder (Root-Left-Right) and Postorder (Left-Right-Root)
	Depth First Traversals:
	(a) Inorder (Left, Root, Right) : 4 2 5 1 3
	(b) Preorder (Root, Left, Right) : 1 2 4 5 3
	(c) Postorder (Left, Right, Root) : 4 5 2 3 1
Breadth First Traversal: Level Order Traversal
	printLevelorder(tree)
	====================
	1) Create an empty queue q
	2) temp_node = root /*start from root*/
	3) Loop while temp_node is not NULL
		a) print temp_node->data.
		b) Enqueue temp_node’s children (first left then right children) to q
		c) Dequeue a node from q and assign it’s value to temp_node
		
			void printLevelOrder(Node *root)
		{
			// Base Case
			if (root == NULL)  return;
		 
			// Create an empty queue for level order tarversal
			queue<Node *> q;
		 
			// Enqueue Root and initialize height
			q.push(root);
		 
			while (q.empty() == false)
			{
				// Print front of queue and remove it from queue
				Node *node = q.front();
				cout << node->data << " ";
				q.pop();
		 
				/* Enqueue left child */
				if (node->left != NULL)
					q.push(node->left);
		 
				/*Enqueue right child */
				if (node->right != NULL)
					q.push(node->right);
			}
		}
Maximum number of nodes = 2(power h) – 1.
2) Maximum number of nodes in a binary tree of height ‘h’ is 2(power h) – 1.

3) The maximum number of nodes at level ‘L’ of a binary tree is 2 power (L-1).

Balanced Binary Tree
======================
A binary tree is balanced if height of the tree is O(Log n) where n is number of nodes. For Example, AVL tree maintain O(Log n) height by making sure that the difference between heights of left and right subtrees is 1. Red-Black trees maintain O(Log n) height by making sure that the number of Black nodes on every root to leaf paths are same and there are no adjacent red nodes. Balanced Binary Search trees are performance wise good as they provide O(log n) time for search, insert and delete.

Binary Search Tree
==================
Search :  O(h)	-- Insertion : O(h) -- Deletion : O(h) -- Extra Space : O(n) for pointers

h: Height of BST , n: Number of nodes in BST

BST provide moderate access/search (quicker than Linked List and slower than arrays).
BST provide moderate insertion/deletion (quicker than Arrays and slower than Linked Lists).
If Binary Search Tree is Height Balanced, then h = O(Log n) 
	- BST elements are stored in an ordered manner

Hashing	Hash Function:
=====================
 A function that converts a given big input key to a small practical integer value. The mapped integer value is used as an index in hash table. A good hash function should have following properties
1) Efficiently computable.
2) Should uniformly distribute the keys (Each table position equally likely for each key)
	Collision Handling: 
	==================
	Since a hash function gets us a small number for a key which is a big integer or string, there is possibility that two keys result in same value. The situation where a newly inserted key maps to an already occupied slot in hash table is called collision and must be handled using some collision handling technique. Following are the ways to handle collisions:

	1 - Chaining:The idea is to make each cell of hash table point to a linked list of records that have same hash function value. Chaining is simple, but requires additional memory outside the table.
	
	2 - Open Addressing: In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element, we one by one examine table slots until the desired element is found or it is clear that the element is not in the table
	
Space : O(n)
Search    : O(1) [Average]    O(n) [Worst case]
Insertion : O(1) [Average]    O(n) [Worst Case]
Deletion  : O(1) [Average]    O(n) [Worst Case]

	- hashing, elements are unordered 